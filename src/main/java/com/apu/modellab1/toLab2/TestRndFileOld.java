package com.apu.modellab1.toLab2;

import java.awt.FileDialog;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.PrintWriter;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.UIManager;

import rnd.RandomGenerators;
import widgets.ChooseRandom;

/**
 * This type was generated by a SmartGuide.
 */
public class TestRndFileOld extends JFrame {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private JPanel ivjJFrameContentPane = null;

	private JPanel ivjMainPane = null;

	private JLabel ivjJLabel1 = null;

	private JLabel ivjJLabel2 = null;

	private JPanel ivjJPanel2 = null;

	private JPanel ivjJPanel3 = null;

	private JScrollPane ivjJScrollPane1 = null;

	IvjEventHandler ivjEventHandler = new IvjEventHandler();

	private JButton ivjJButtonFindFile = null;

	private stat.Histo ivjHisto = null;

	private FileDialog ivjFileDialog = null;

	private ChooseRandom ivjChooseRandom = null;

	private widgets.Diagram ivjDiagram = null;

	private JTextArea ivjJTextArea = null;

	private JTextField ivjJTextFieldFileName = null;

	private JTextField ivjJTextFieldFileSize = null;

	private File ivjFile = null;

	private JTextField ivjJTextFieldFolder = null;

	private JButton ivjJButton1 = null;

	private JButton ivjJButton11 = null;

	private JButton ivjJButton12 = null;

	private JButton ivjJButton13 = null;

	private JButton ivjJButton14 = null;

	class IvjEventHandler implements java.awt.event.ActionListener,
			java.awt.event.ComponentListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == TestRndFileOld.this.getJButtonFindFile())
				connEtoM8(e);
			if (e.getSource() == TestRndFileOld.this.getJButtonFindFile())
				connEtoM9(e);
			if (e.getSource() == TestRndFileOld.this.getJButtonFindFile())
				connEtoM1(e);
			if (e.getSource() == TestRndFileOld.this.getJButton1())
				connEtoC1(e);
			if (e.getSource() == TestRndFileOld.this.getJButton11())
				connEtoC2(e);
			if (e.getSource() == TestRndFileOld.this.getJButton12())
				connEtoC3(e);
			if (e.getSource() == TestRndFileOld.this.getJButton13())
				connEtoC4(e);
			if (e.getSource() == TestRndFileOld.this.getJButton14())
				connEtoC5(e);
		};

		public void componentHidden(java.awt.event.ComponentEvent e) {
			if (e.getSource() == TestRndFileOld.this.getFileDialog())
				connEtoM2();
			if (e.getSource() == TestRndFileOld.this.getFileDialog())
				connEtoM10();
		};

		public void componentMoved(java.awt.event.ComponentEvent e) {
			if (e.getSource() == TestRndFileOld.this.getFileDialog())
				connEtoM2();
			if (e.getSource() == TestRndFileOld.this.getFileDialog())
				connEtoM10();
		};

		public void componentResized(java.awt.event.ComponentEvent e) {
			if (e.getSource() == TestRndFileOld.this.getFileDialog())
				connEtoM2();
			if (e.getSource() == TestRndFileOld.this.getFileDialog())
				connEtoM10();
		};

		public void componentShown(java.awt.event.ComponentEvent e) {
			if (e.getSource() == TestRndFileOld.this.getFileDialog())
				connEtoM2();
			if (e.getSource() == TestRndFileOld.this.getFileDialog())
				connEtoM10();
		};
	};

	/**
	 * Main constructor comment.
	 */
	public TestRndFileOld() {
		super();
		initialize();
	}

	/**
	 * Main constructor comment.
	 * 
	 * @param title
	 *            java.lang.String
	 */
	public TestRndFileOld(String title) {
		super(title);
	}

	/**
	 * connEtoC1: (JButton1.action.actionPerformed(java.awt.event.ActionEvent)
	 * --> TestRndFileOld.createFile()Z)
	 * 
	 * @return boolean
	 * @param arg1
	 *            java.awt.event.ActionEvent
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private boolean connEtoC1(java.awt.event.ActionEvent arg1) {
		boolean connEtoC1Result = false;
		try {
			// user code begin {1}
			// user code end
			connEtoC1Result = this.createFile();
			// user code begin {2}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
		return connEtoC1Result;
	}

	/**
	 * connEtoC2: (JButton11.action.actionPerformed(java.awt.event.ActionEvent)
	 * --> TestRndFileOld.showFile()V)
	 * 
	 * @param arg1
	 *            java.awt.event.ActionEvent
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC2(java.awt.event.ActionEvent arg1) {
		try {
			// user code begin {1}
			// user code end
			this.showFile();
			// user code begin {2}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}

	/**
	 * connEtoC3: (JButton12.action.actionPerformed(java.awt.event.ActionEvent)
	 * --> TestRndFileOld.showParameters()V)
	 * 
	 * @param arg1
	 *            java.awt.event.ActionEvent
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC3(java.awt.event.ActionEvent arg1) {
		try {
			// user code begin {1}
			// user code end
			this.showParameters();
			// user code begin {2}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}

	/**
	 * connEtoC4: (JButton13.action.actionPerformed(java.awt.event.ActionEvent)
	 * --> TestRndFileOld.pirsonTest()V)
	 * 
	 * @param arg1
	 *            java.awt.event.ActionEvent
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC4(java.awt.event.ActionEvent arg1) {
		try {
			// user code begin {1}
			// user code end
			this.pirsonTest();
			// user code begin {2}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}

	/**
	 * connEtoC5: (JButton14.action.actionPerformed(java.awt.event.ActionEvent)
	 * --> TestRndFileOld.kolmogorovTest()V)
	 * 
	 * @param arg1
	 *            java.awt.event.ActionEvent
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoC5(java.awt.event.ActionEvent arg1) {
		try {
			// user code begin {1}
			// user code end
			this.kolmogorovTest();
			// user code begin {2}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}

	/**
	 * connEtoM1:
	 * (JButtonFindFile.action.actionPerformed(java.awt.event.ActionEvent) -->
	 * FileDialog1.show()V)
	 * 
	 * @param arg1
	 *            java.awt.event.ActionEvent
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoM1(java.awt.event.ActionEvent arg1) {
		try {
			// user code begin {1}
			// user code end
			getFileDialog().setVisible(true);
			// user code begin {2}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}

	/**
	 * connEtoM10: (FileDialog.component. --> JTextFieldFileName1.text)
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoM10() {
		try {
			// user code begin {1}
			// user code end
			getJTextFieldFolder().setText(getFileDialog().getDirectory());
			// user code begin {2}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}

	/**
	 * connEtoM2: (FileDialog1.component. --> NameFile.text)
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoM2() {
		try {
			// user code begin {1}
			// user code end
			getJTextFieldFileName().setText(getFileDialog().getFile());
			// user code begin {2}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}

	/**
	 * connEtoM8:
	 * (JButtonFindFile.action.actionPerformed(java.awt.event.ActionEvent) -->
	 * FileDialog.directory)
	 * 
	 * @param arg1
	 *            java.awt.event.ActionEvent
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoM8(java.awt.event.ActionEvent arg1) {
		try {
			// user code begin {1}
			// user code end
			getFileDialog().setDirectory(getJTextFieldFolder().getText());
			// user code begin {2}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}

	/**
	 * connEtoM9:
	 * (JButtonFindFile.action.actionPerformed(java.awt.event.ActionEvent) -->
	 * FileDialog.file)
	 * 
	 * @param arg1
	 *            java.awt.event.ActionEvent
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void connEtoM9(java.awt.event.ActionEvent arg1) {
		try {
			// user code begin {1}
			// user code end
			getFileDialog().setFile(getJTextFieldFileName().getText());
			// user code begin {2}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {3}
			// user code end
			handleException(ivjExc);
		}
	}

	/**
	 * Insert the method's description here. Creation date: (19.10.2006 0:38:23)
	 * 
	 * @return boolean
	 */
	public boolean createFile() {
		if (JOptionPane.showConfirmDialog(this,
				"Буде створено НОВИЙ файл! Ви впевнені?",
				" Спроба створення файлу.", 
				JOptionPane.OK_CANCEL_OPTION) != 0)
			return false;
		PrintWriter dataOutStream = openFileForWrite();
		/* Создание выбранного генератора" */
		int n = Integer.parseInt(getJTextFieldFileSize().getText());
		/* Заполнение файла */
		for (int i = 1; i <= n; i++) {
			double nxt = this.getChooseRandom().next();
			/* Отрицательные числа в файл не записываем" */
			while (nxt < 0)
				nxt = this.getChooseRandom().next();
			dataOutStream.println(nxt);
		}
		dataOutStream.close();
		/* Вывод параметров файла */
		showParameters();
		return false;
	}

	/**
	 * Создание гистограммы для выборки из файла Creation date: (15.10.2006
	 * 18:50:37)
	 * 
	 * @return boolean
	 * @param fileName
	 *            java.lang.String
	 */
	public boolean createHisto() {
		try {
			/* Предварительная обработка файла" */
			LineNumberReader dataInStream = openFileForRead();
			String result;
			getHisto().init();
			while ((result = dataInStream.readLine()) != null) {
				double z = Double.parseDouble(result);
				getHisto().add(z);
			}
			dataInStream.close();
		} catch (IOException ioe) {
			javax.swing.JOptionPane.showMessageDialog(null, "Ошибка чтения",
					"Создание гистограммы для файла",
					javax.swing.JOptionPane.ERROR_MESSAGE);
			return false;
		} catch (java.lang.Throwable ivjExc) {
			javax.swing.JOptionPane.showMessageDialog(null,
					"Ошибка преобразования", "Создание гистограммы для файла",
					javax.swing.JOptionPane.ERROR_MESSAGE);
			return false;
		}
		return true;
	}

	/**
	 * Return the ChooseRandom1 property value.
	 * 
	 * @return rnd.ChooseRandom
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private widgets.ChooseRandom getChooseRandom() {
		if (ivjChooseRandom == null) {
			try {
				ivjChooseRandom = new widgets.ChooseRandom();
				ivjChooseRandom.setName("ChooseRandom");
				// ivjChooseRandom.setLayout(null);
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjChooseRandom;
	}

	/**
	 * Return the Diagram1 property value.
	 * 
	 * @return paint.Diagram
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private widgets.Diagram getDiagram() {
		if (ivjDiagram == null) {
			try {
				ivjDiagram = new widgets.Diagram();
				ivjDiagram.setName("Diagram");
				ivjDiagram.setHorizontalMaxEnabled(false);
				ivjDiagram.setVerticalMaxEnabled(false);
				ivjDiagram.setHorizontalMaxText("1");
				ivjDiagram.setTitleText("Гістограми");
				ivjDiagram.setVerticalMinEnabled(false);
				ivjDiagram.setVerticalMaxText("1");
				ivjDiagram.setHorizontalMinEnabled(false);
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjDiagram;
	}

	/**
	 * Return the File property value.
	 * 
	 * @return java.io.File
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private java.io.File getFile() {
		// user code begin {1}
		// user code end
		return ivjFile;
	}

	/**
	 * Return the FileDialog1 property value.
	 * 
	 * @return java.awt.FileDialog
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private java.awt.FileDialog getFileDialog() {
		if (ivjFileDialog == null) {
			try {
				ivjFileDialog = new java.awt.FileDialog(this);
				ivjFileDialog.setName("FileDialog");
				ivjFileDialog.setDirectory("./");
				ivjFileDialog.setLayout(null);
				ivjFileDialog.setFile("");
				ivjFileDialog.setMode(java.awt.FileDialog.LOAD);
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjFileDialog;
	}

	/**
	 * Return the Histo property value.
	 * 
	 * @return stat.Histo
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private stat.Histo getHisto() {
		if (ivjHisto == null) {
			try {
				ivjHisto = new stat.Histo();
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjHisto;
	}

	/**
	 * Return the JButton1 property value.
	 * 
	 * @return javax.swing.JButton
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JButton getJButton1() {
		if (ivjJButton1 == null) {
			try {
				ivjJButton1 = new javax.swing.JButton();
				ivjJButton1.setName("JButton1");
				ivjJButton1.setFont(new java.awt.Font("dialog", 0, 12));
				ivjJButton1.setText("Створення файлу");
				ivjJButton1.setMargin(new java.awt.Insets(2, 4, 2, 4));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJButton1;
	}

	/**
	 * Return the JButton11 property value.
	 * 
	 * @return javax.swing.JButton
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JButton getJButton11() {
		if (ivjJButton11 == null) {
			try {
				ivjJButton11 = new javax.swing.JButton();
				ivjJButton11.setName("JButton11");
				ivjJButton11.setFont(new java.awt.Font("dialog", 0, 12));
				ivjJButton11.setText(" Перегляд початку файла");
				ivjJButton11.setMargin(new java.awt.Insets(2, 4, 2, 4));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJButton11;
	}

	/**
	 * Return the JButton12 property value.
	 * 
	 * @return javax.swing.JButton
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JButton getJButton12() {
		if (ivjJButton12 == null) {
			try {
				ivjJButton12 = new javax.swing.JButton();
				ivjJButton12.setName("JButton12");
				ivjJButton12.setFont(new java.awt.Font("dialog", 0, 12));
				ivjJButton12.setText(" Параметри  файлу ");
				ivjJButton12.setMargin(new java.awt.Insets(2, 4, 2, 4));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJButton12;
	}

	/**
	 * Return the JButton13 property value.
	 * 
	 * @return javax.swing.JButton
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JButton getJButton13() {
		if (ivjJButton13 == null) {
			try {
				ivjJButton13 = new javax.swing.JButton();
				ivjJButton13.setName("JButton13");
				ivjJButton13.setFont(new java.awt.Font("dialog", 0, 12));
				ivjJButton13.setText("Тест файлу за Пірсоном");
				ivjJButton13.setMargin(new java.awt.Insets(2, 4, 2, 4));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJButton13;
	}

	/**
	 * Return the JButton14 property value.
	 * 
	 * @return javax.swing.JButton
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JButton getJButton14() {
		if (ivjJButton14 == null) {
			try {
				ivjJButton14 = new javax.swing.JButton();
				ivjJButton14.setName("JButton14");
				ivjJButton14.setFont(new java.awt.Font("dialog", 0, 12));
				ivjJButton14.setText(" Тест по Колмогорову-Смирнову");
				ivjJButton14.setMargin(new java.awt.Insets(2, 4, 2, 4));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJButton14;
	}

	/**
	 * Return the JButton1 property value.
	 * 
	 * @return javax.swing.JButton
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JButton getJButtonFindFile() {
		if (ivjJButtonFindFile == null) {
			try {
				ivjJButtonFindFile = new javax.swing.JButton();
				ivjJButtonFindFile.setName("JButtonFindFile");
				ivjJButtonFindFile.setFont(new java.awt.Font("dialog", 0, 12));
				ivjJButtonFindFile.setText("Робота з файлом на ім'я");
				ivjJButtonFindFile.setMargin(new java.awt.Insets(2, 2, 2, 2));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJButtonFindFile;
	}

	/**
	 * Return the JFrameContentPane property value.
	 * 
	 * @return javax.swing.JPanel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JPanel getJFrameContentPane() {
		if (ivjJFrameContentPane == null) {
			try {
				ivjJFrameContentPane = new javax.swing.JPanel();
				ivjJFrameContentPane.setName("JFrameContentPane");
				ivjJFrameContentPane.setLayout(new java.awt.BorderLayout());
				getJFrameContentPane().add(getMainPane(), "Center");
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJFrameContentPane;
	}

	/**
	 * Return the JLabel1 property value.
	 * 
	 * @return javax.swing.JLabel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JLabel getJLabel1() {
		if (ivjJLabel1 == null) {
			try {
				ivjJLabel1 = new javax.swing.JLabel();
				ivjJLabel1.setName("JLabel1");
				ivjJLabel1.setFont(new java.awt.Font("sansserif", 0, 12));
				ivjJLabel1.setText("Path");
				ivjJLabel1.setForeground(java.awt.Color.black);
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJLabel1;
	}

	/**
	 * Return the JLabel2 property value.
	 * 
	 * @return javax.swing.JLabel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JLabel getJLabel2() {
		if (ivjJLabel2 == null) {
			try {
				ivjJLabel2 = new javax.swing.JLabel();
				ivjJLabel2.setName("JLabel2");
				ivjJLabel2.setFont(new java.awt.Font("sansserif", 0, 12));
				ivjJLabel2.setText("Обсяг вибірки у файлі");
				ivjJLabel2.setForeground(java.awt.Color.black);
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJLabel2;
	}

	/**
	 * Return the JPanel2 property value.
	 * 
	 * @return javax.swing.JPanel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JPanel getJPanel2() {
		if (ivjJPanel2 == null) {
			try {
				ivjJPanel2 = new javax.swing.JPanel();
				ivjJPanel2.setName("JPanel2");
				ivjJPanel2.setBorder(new javax.swing.border.EtchedBorder());
				ivjJPanel2.setLayout(new java.awt.GridBagLayout());

				java.awt.GridBagConstraints constraintsChooseRandom = new java.awt.GridBagConstraints();
				constraintsChooseRandom.gridx = 1;
				constraintsChooseRandom.gridy = 4;
				constraintsChooseRandom.gridwidth = 3;
				constraintsChooseRandom.fill = java.awt.GridBagConstraints.BOTH;
				constraintsChooseRandom.weightx = 1.0;
				constraintsChooseRandom.weighty = 1.0;
				constraintsChooseRandom.ipadx = 253;
				constraintsChooseRandom.ipady = 48;
				constraintsChooseRandom.insets = new java.awt.Insets(2, 7, 10,
						8);
				getJPanel2().add(getChooseRandom(), constraintsChooseRandom);

				java.awt.GridBagConstraints constraintsJButtonFindFile = new java.awt.GridBagConstraints();
				constraintsJButtonFindFile.gridx = 1;
				constraintsJButtonFindFile.gridy = 1;
				constraintsJButtonFindFile.gridwidth = 2;
				constraintsJButtonFindFile.ipadx = 3;
				constraintsJButtonFindFile.ipady = 1;
				constraintsJButtonFindFile.insets = new java.awt.Insets(8, 7,
						3, 1);
				getJPanel2().add(getJButtonFindFile(),
						constraintsJButtonFindFile);

				java.awt.GridBagConstraints constraintsJLabel2 = new java.awt.GridBagConstraints();
				constraintsJLabel2.gridx = 1;
				constraintsJLabel2.gridy = 3;
				constraintsJLabel2.ipadx = 7;
				constraintsJLabel2.ipady = 11;
				constraintsJLabel2.insets = new java.awt.Insets(3, 7, 1, 6);
				getJPanel2().add(getJLabel2(), constraintsJLabel2);

				java.awt.GridBagConstraints constraintsJTextFieldFileSize = new java.awt.GridBagConstraints();
				constraintsJTextFieldFileSize.gridx = 2;
				constraintsJTextFieldFileSize.gridy = 3;
				constraintsJTextFieldFileSize.gridwidth = 2;
				constraintsJTextFieldFileSize.fill = java.awt.GridBagConstraints.HORIZONTAL;
				constraintsJTextFieldFileSize.weightx = 1.0;
				constraintsJTextFieldFileSize.ipadx = 85;
				constraintsJTextFieldFileSize.ipady = 3;
				constraintsJTextFieldFileSize.insets = new java.awt.Insets(5,
						6, 3, 8);
				getJPanel2().add(getJTextFieldFileSize(),
						constraintsJTextFieldFileSize);

				java.awt.GridBagConstraints constraintsJTextFieldFileName = new java.awt.GridBagConstraints();
				constraintsJTextFieldFileName.gridx = 3;
				constraintsJTextFieldFileName.gridy = 1;
				constraintsJTextFieldFileName.fill = java.awt.GridBagConstraints.HORIZONTAL;
				constraintsJTextFieldFileName.weightx = 1.0;
				constraintsJTextFieldFileName.ipadx = 60;
				constraintsJTextFieldFileName.ipady = 4;
				constraintsJTextFieldFileName.insets = new java.awt.Insets(10,
						2, 5, 8);
				getJPanel2().add(getJTextFieldFileName(),
						constraintsJTextFieldFileName);

				java.awt.GridBagConstraints constraintsJLabel1 = new java.awt.GridBagConstraints();
				constraintsJLabel1.gridx = 1;
				constraintsJLabel1.gridy = 2;
				constraintsJLabel1.ipadx = 10;
				constraintsJLabel1.ipady = 7;
				constraintsJLabel1.insets = new java.awt.Insets(4, 7, 2, 118);
				getJPanel2().add(getJLabel1(), constraintsJLabel1);

				java.awt.GridBagConstraints constraintsJTextFieldFolder = new java.awt.GridBagConstraints();
				constraintsJTextFieldFolder.gridx = 1;
				constraintsJTextFieldFolder.gridy = 2;
				constraintsJTextFieldFolder.gridwidth = 3;
				constraintsJTextFieldFolder.fill = java.awt.GridBagConstraints.HORIZONTAL;
				constraintsJTextFieldFolder.weightx = 1.0;
				constraintsJTextFieldFolder.ipadx = 212;
				constraintsJTextFieldFolder.ipady = 4;
				constraintsJTextFieldFolder.insets = new java.awt.Insets(3, 40,
						2, 8);
				getJPanel2().add(getJTextFieldFolder(),
						constraintsJTextFieldFolder);
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJPanel2;
	}

	/**
	 * Return the JPanel3 property value.
	 * 
	 * @return javax.swing.JPanel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JPanel getJPanel3() {
		if (ivjJPanel3 == null) {
			try {
				ivjJPanel3 = new javax.swing.JPanel();
				ivjJPanel3.setName("JPanel3");
				ivjJPanel3.setBorder(new javax.swing.border.EtchedBorder());
				ivjJPanel3.setLayout(new java.awt.GridBagLayout());

				java.awt.GridBagConstraints constraintsJButton1 = new java.awt.GridBagConstraints();
				constraintsJButton1.gridx = 1;
				constraintsJButton1.gridy = 1;
				constraintsJButton1.ipadx = 122;
				constraintsJButton1.insets = new java.awt.Insets(12, 23, 0, 23);
				getJPanel3().add(getJButton1(), constraintsJButton1);

				java.awt.GridBagConstraints constraintsJButton11 = new java.awt.GridBagConstraints();
				constraintsJButton11.gridx = 1;
				constraintsJButton11.gridy = 2;
				constraintsJButton11.ipadx = 78;
				constraintsJButton11.insets = new java.awt.Insets(0, 23, 0, 23);
				getJPanel3().add(getJButton11(), constraintsJButton11);

				java.awt.GridBagConstraints constraintsJButton12 = new java.awt.GridBagConstraints();
				constraintsJButton12.gridx = 1;
				constraintsJButton12.gridy = 3;
				constraintsJButton12.ipadx = 112;
				constraintsJButton12.insets = new java.awt.Insets(0, 23, 24, 23);
				getJPanel3().add(getJButton12(), constraintsJButton12);

				java.awt.GridBagConstraints constraintsJButton13 = new java.awt.GridBagConstraints();
				constraintsJButton13.gridx = 1;
				constraintsJButton13.gridy = 3;
				constraintsJButton13.ipadx = 86;
				constraintsJButton13.insets = new java.awt.Insets(24, 23, 0, 23);
				getJPanel3().add(getJButton13(), constraintsJButton13);

				java.awt.GridBagConstraints constraintsJButton14 = new java.awt.GridBagConstraints();
				constraintsJButton14.gridx = 1;
				constraintsJButton14.gridy = 4;
				constraintsJButton14.ipadx = 40;
				constraintsJButton14.insets = new java.awt.Insets(0, 23, 15, 23);
				getJPanel3().add(getJButton14(), constraintsJButton14);
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJPanel3;
	}

	/**
	 * Return the JScrollPane1 property value.
	 * 
	 * @return javax.swing.JScrollPane
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JScrollPane getJScrollPane1() {
		if (ivjJScrollPane1 == null) {
			try {
				ivjJScrollPane1 = new javax.swing.JScrollPane();
				ivjJScrollPane1.setName("JScrollPane1");
				ivjJScrollPane1
						.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
				ivjJScrollPane1
						.setBorder(new javax.swing.border.EtchedBorder());
				ivjJScrollPane1
						.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
				getJScrollPane1().setViewportView(getJTextArea());
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJScrollPane1;
	}

	/**
	 * Return the JTextArea1 property value.
	 * 
	 * @return javax.swing.JTextArea
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JTextArea getJTextArea() {
		if (ivjJTextArea == null) {
			try {
				ivjJTextArea = new javax.swing.JTextArea();
				ivjJTextArea.setName("JTextArea");
				ivjJTextArea.setLineWrap(false);
				ivjJTextArea.setWrapStyleWord(true);
				ivjJTextArea.setBounds(0, 0, 160, 120);
				ivjJTextArea.setFont(new java.awt.Font("Dialog",
						java.awt.Font.PLAIN, 14));
				ivjJTextArea.setMargin(new java.awt.Insets(2, 2, 2, 8));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJTextArea;
	}

	/**
	 * Return the NameFile property value.
	 * 
	 * @return javax.swing.JTextField
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JTextField getJTextFieldFileName() {
		if (ivjJTextFieldFileName == null) {
			try {
				ivjJTextFieldFileName = new javax.swing.JTextField();
				ivjJTextFieldFileName.setName("JTextFieldFileName");
				ivjJTextFieldFileName.setText("test");
				ivjJTextFieldFileName
						.setMargin(new java.awt.Insets(0, 4, 0, 0));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJTextFieldFileName;
	}

	/**
	 * Return the JTextField2 property value.
	 * 
	 * @return javax.swing.JTextField
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JTextField getJTextFieldFileSize() {
		if (ivjJTextFieldFileSize == null) {
			try {
				ivjJTextFieldFileSize = new javax.swing.JTextField();
				ivjJTextFieldFileSize.setName("JTextFieldFileSize");
				ivjJTextFieldFileSize.setText("300");
				ivjJTextFieldFileSize
						.setMargin(new java.awt.Insets(0, 0, 0, 4));
				ivjJTextFieldFileSize
						.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJTextFieldFileSize;
	}

	/**
	 * Return the JTextFieldFileName1 property value.
	 * 
	 * @return javax.swing.JTextField
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JTextField getJTextFieldFolder() {
		if (ivjJTextFieldFolder == null) {
			try {
				ivjJTextFieldFolder = new javax.swing.JTextField();
				ivjJTextFieldFolder.setName("JTextFieldFolder");
				ivjJTextFieldFolder.setText("");
				ivjJTextFieldFolder.setMargin(new java.awt.Insets(0, 4, 0, 0));
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjJTextFieldFolder;
	}

	/**
	 * Return the MainPane property value.
	 * 
	 * @return javax.swing.JPanel
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private javax.swing.JPanel getMainPane() {
		if (ivjMainPane == null) {
			try {
				ivjMainPane = new javax.swing.JPanel();
				ivjMainPane.setName("MainPane");
				ivjMainPane.setBorder(new javax.swing.border.CompoundBorder());
				ivjMainPane.setLayout(new java.awt.GridBagLayout());

				java.awt.GridBagConstraints constraintsDiagram = new java.awt.GridBagConstraints();
				constraintsDiagram.gridx = 2;
				constraintsDiagram.gridy = 2;
				constraintsDiagram.fill = java.awt.GridBagConstraints.BOTH;
				constraintsDiagram.weightx = 1.0;
				constraintsDiagram.weighty = 1.0;
				constraintsDiagram.ipadx = 41;
				constraintsDiagram.ipady = 84;
				constraintsDiagram.insets = new java.awt.Insets(5, 6, 12, 12);
				getMainPane().add(getDiagram(), constraintsDiagram);

				java.awt.GridBagConstraints constraintsJPanel2 = new java.awt.GridBagConstraints();
				constraintsJPanel2.gridx = 1;
				constraintsJPanel2.gridy = 1;
				constraintsJPanel2.fill = java.awt.GridBagConstraints.BOTH;
				constraintsJPanel2.weightx = 1.0;
				constraintsJPanel2.weighty = 1.0;
				constraintsJPanel2.ipadx = -4;
				constraintsJPanel2.ipady = -4;
				constraintsJPanel2.insets = new java.awt.Insets(10, 11, 5, 5);
				getMainPane().add(getJPanel2(), constraintsJPanel2);

				java.awt.GridBagConstraints constraintsJPanel3 = new java.awt.GridBagConstraints();
				constraintsJPanel3.gridx = 2;
				constraintsJPanel3.gridy = 1;
				constraintsJPanel3.fill = java.awt.GridBagConstraints.BOTH;
				constraintsJPanel3.weightx = 1.0;
				constraintsJPanel3.weighty = 1.0;
				constraintsJPanel3.ipadx = -4;
				constraintsJPanel3.ipady = -4;
				constraintsJPanel3.insets = new java.awt.Insets(10, 6, 5, 12);
				getMainPane().add(getJPanel3(), constraintsJPanel3);

				java.awt.GridBagConstraints constraintsJScrollPane1 = new java.awt.GridBagConstraints();
				constraintsJScrollPane1.gridx = 1;
				constraintsJScrollPane1.gridy = 2;
				constraintsJScrollPane1.fill = java.awt.GridBagConstraints.BOTH;
				constraintsJScrollPane1.weightx = 1.0;
				constraintsJScrollPane1.weighty = 1.0;
				constraintsJScrollPane1.ipadx = 252;
				constraintsJScrollPane1.ipady = 241;
				constraintsJScrollPane1.insets = new java.awt.Insets(5, 11, 12,
						5);
				getMainPane().add(getJScrollPane1(), constraintsJScrollPane1);
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		return ivjMainPane;
	}

	/**
	 * Called whenever the part throws an exception.
	 * 
	 * @param exception
	 *            java.lang.Throwable
	 */
	private void handleException(java.lang.Throwable exception) {

		/* Uncomment the following lines to print uncaught exceptions to stdout */
		// System.out.println("--------- UNCAUGHT EXCEPTION ---------");
		// exception.printStackTrace(System.out);
	}

	/**
	 * Initializes connections
	 * 
	 * @exception java.lang.Exception
	 *                The exception description.
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void initConnections() throws java.lang.Exception {
		// user code begin {1}
		// user code end
		getFileDialog().addComponentListener(ivjEventHandler);
		getJButtonFindFile().addActionListener(ivjEventHandler);
		getJButton1().addActionListener(ivjEventHandler);
		getJButton11().addActionListener(ivjEventHandler);
		getJButton12().addActionListener(ivjEventHandler);
		getJButton13().addActionListener(ivjEventHandler);
		getJButton14().addActionListener(ivjEventHandler);
	}

	/**
	 * Initialize the class.
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void initialize() {
		try {
			// user code begin {1}
			// user code end
			setName("Main");
			setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
			setBackground(java.awt.SystemColor.activeCaptionText);
			setSize(579, 445);
			setVisible(true);
			setTitle("Робота с генераторами різних законів розподілу");
			setContentPane(getJFrameContentPane());
			initConnections();
		} catch (java.lang.Throwable ivjExc) {
			handleException(ivjExc);
		}
		// user code begin {2}
		// user code end
	}

	/**
	 * "Проверка выборки из файла на соответствие заданному закону
	 * распределения" Creation date: (02.11.2005 19:32:49)
	 * 
	 * @return boolean
	 */
	public void kolmogorovTest() {
		// Выбираем закон распределения
		RandomGenerators gen = getChooseRandom().getRandom();
		// Создаем гистограмму для файла
		if ((gen != null) && (createHisto())) {
			/* Берем из гистограммы эмпирические частоты */
			double[] a = getHisto().accumFrequency();
			double[] b = getHisto().realBorders();
			/* Создаем массив теоретических частот */
			double[] t = new double[a.length];
			for (int i = 0; i < t.length - 1; i++) {
				t[i] = gen.probability(b[i + 1]);
			}
			t[t.length - 1] = 1;
			/* Рисуем эмпирическую гистограмму */
			getHisto().showAccumFrec(getDiagram(), java.awt.Color.blue, 0.9,
					0.05, true);
			/* Рисуем теоретическую гистограмму */
			getDiagram().setPainterColor(java.awt.Color.orange);
			getDiagram().drawBarsDiagram(b, t, 0.6, 0.35, false);
			// Обрабатываем данные по Колмогорову-Смирнову
			getJTextArea().setText(
					"Гіпотеза про відповідність\n"
							+ "вибраному закону розподілу:\n" + gen.toString()
							+ "\n");
			double max = stat.StatTables.kolmSmirnovResult(a, t, b,
					getJTextArea());
			double krit = stat.StatTables.kolmogorovSmirnov05(getHisto()
					.count());
			String s = "Мax відхілення = " + stat.StatTables.format(max, 1, 2)
					+ ".\n";
			s += "Критичне відхілення = " + stat.StatTables.format(krit, 1, 2)
					+ ".\n";
			if (max < krit)
				s += "Гіпотезу можна прийняти.";
			else
				s += "Гіпотезу слід відкинути.";
			getJTextArea().append(s);
		}
	}

	/**
	 * Starts the application.
	 * 
	 * @param args
	 *            an array of command-line arguments
	 */
	public static void main(java.lang.String[] args) {
		try {
			/* Set native look and feel */
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
			// UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
			/* Create the frame */
			TestRndFileOld aTestFile = new TestRndFileOld();
			/* Add a windowListener for the windowClosedEvent */
			aTestFile.addWindowListener(new java.awt.event.WindowAdapter() {
				public void windowClosed(java.awt.event.WindowEvent e) {
					System.exit(0);
				};
			});
			aTestFile.setVisible(true);
		} catch (Throwable exception) {
			System.err.println("Exception occurred in mainForAllLab() of TestRndFileOld");
			exception.printStackTrace(System.out);
		}
	}

	/**
	 * Insert the method's description here. Creation date: (28.01.2006
	 * 20:41:46)
	 */
	public LineNumberReader openFileForRead() {
		setFile(new File(getJTextFieldFolder().getText(),
				getJTextFieldFileName().getText()));
		try {
			return new LineNumberReader(new FileReader(getFile()));
		} catch (FileNotFoundException fnf) {
			javax.swing.JOptionPane.showMessageDialog(null, "Файл "
					+ getFile().toString() + " не знайдено",
					"Открытие файла для чтения",
					javax.swing.JOptionPane.ERROR_MESSAGE);
			return null;
		}
	}

	/**
	 * Insert the method's description here. Creation date: (28.01.2006
	 * 20:41:46)
	 */
	public PrintWriter openFileForWrite() {
		setFile(new File(getJTextFieldFolder().getText(),
				getJTextFieldFileName().getText()));
		try {
			return new PrintWriter(new FileWriter(getFile()));
		} catch (FileNotFoundException fnf) {
			javax.swing.JOptionPane.showMessageDialog(null, "Файл "
					+ getFile().toString() + " не найден",
					"Открытие файла для записи",
					javax.swing.JOptionPane.ERROR_MESSAGE);
			return null;
		} catch (IOException ioe) {
			javax.swing.JOptionPane.showMessageDialog(null, "Ошибка записи",
					"Открытие файла для записи",
					javax.swing.JOptionPane.ERROR_MESSAGE);
			return null;
		}
	}

	/**
	 * Insert the method's description here. Creation date: (03.11.2005 1:03:35)
	 * 
	 * @return boolean
	 */
	public void pirsonTest() {
		// Выбираем закон распределения
		RandomGenerators gen = getChooseRandom().getRandom();
		// Создаем гистограмму для файла
		if ((gen != null) && (createHisto())) {
			/* Берем из гистограммы эмпирические частоты */
			double[] a = getHisto().absolutFrequency();
			double[] b = getHisto().getBorders();
			/* Создаем массив теоретических частот */
			double[] t = new double[a.length];
			t[0] = gen.probability(b[0]);
			t[t.length - 1] = 1 - gen.probability(b[b.length - 1]);
			for (int i = 1; i < t.length - 1; i++)
				t[i] = gen.probability(b[i]) - gen.probability(b[i - 1]);
			/* Превращаем теор. частоты в абсолютные */
			double[] ta = new double[t.length];
			for (int i = 0; i < ta.length; i++)
				ta[i] = t[i] * getHisto().count();
			/* Рисуем гистограммы эмпирическую и теоретическую */
			getHisto().showRelFrec(getDiagram(), java.awt.Color.magenta, 0.9,
					0.05, true);
			getDiagram().setPainterColor(java.awt.Color.orange);
			getDiagram().drawBarsDiagram(getHisto().realBorders(), t, 0.6, 0.3,
					false);
			// Проводим тест и выводим результаты
			getJTextArea().setText("Гіпотеза про відповідність\n");
			getJTextArea().append("вибраному закону розподілу:\n");
			getJTextArea().append(gen.toString() + "\n");
			double[] res = stat.StatTables.pirsonResult(a, ta, getHisto()
					.realBorders(), getJTextArea(), gen.getKParm());
			getJTextArea().append(
					"Хі-квадрат = " + stat.StatTables.format(res[0], 1, 1));
			getJTextArea().append(
					"\nКритичне значення = "
							+ stat.StatTables.format(res[1], 1, 1));
			if (res[0] < res[1])
				getJTextArea().append("\nГіпотезу можна прийняти");
			else
				getJTextArea().append("\nГіпотезу слід відкинути");
		}
	}

	/**
	 * Set the File to a new value.
	 * 
	 * @param newValue
	 *            java.io.File
	 */
	/* WARNING: THIS METHOD WILL BE REGENERATED. */
	private void setFile(java.io.File newValue) {
		if (ivjFile != newValue) {
			try {
				ivjFile = newValue;
				// user code begin {1}
				// user code end
			} catch (java.lang.Throwable ivjExc) {
				// user code begin {2}
				// user code end
				handleException(ivjExc);
			}
		}
		;
		// user code begin {3}
		// user code end
	}

	/**
	 * Insert the method's description here. Creation date: (19.10.2006 1:32:35)
	 * 
	 * @return boolean
	 */
	public void showFile() {
		BufferedReader dataInStream = openFileForRead();
		int cnt = 0;
		getJTextArea().setText("Перші 50 значень файлу" + "\r\n");
		getDiagram().clear();
		try {
			String result;
			while ((result = dataInStream.readLine()) != null) {
				/* Вывод в окно не более 50 первых значений */
				if (cnt <= 50) {
					this.getJTextArea().append(result + "\n");
				}
				cnt++;
			}
			dataInStream.close();
			getJTextFieldFileSize().setText(Integer.toString(cnt));
		} catch (IOException ioe) {
			javax.swing.JOptionPane.showMessageDialog(null,
					"Не могу прочитать строку", "Вывод значений файла",
					javax.swing.JOptionPane.ERROR_MESSAGE);
		}
	}

	/**
	 * /*Вывод статистических характеристик выборки из файла Creation date:
	 * (16.10.2006 18:06:14)
	 * 
	 * @return boolean
	 */
	public void showParameters() {
		if (this.createHisto()) {
			getJTextArea().setText("Файл " + getFile().toString() + ".\n");
			getJTextFieldFileSize().setText(
					Integer.toString(getHisto().count()));
			/* Вывод гистограмы */
			getHisto().showRelFrec(getDiagram(), java.awt.Color.magenta, 0.8,
					0.15, true);
			/* Вывод параметров */
			getJTextArea().append(getHisto().toString());
			getJTextArea().select(0, 0);
		}
	}
}
